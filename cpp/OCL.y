/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include "Absyn.H"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE yy_scan_string(const char *str);
void yy_delete_buffer(YY_BUFFER_STATE buf);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  extern char *yytext;
  fprintf(stderr,"error: line %d: %s at %s\n", 
    yy_mylinenumber, str, yytext);
}



static OCLfile* YY_RESULT_OCLfile_ = 0;
OCLfile* pOCLfile(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLfile_;
  }
}
OCLfile* pOCLfile(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLfile_;
  }
}

static ListOCLPackage* YY_RESULT_ListOCLPackage_ = 0;
ListOCLPackage* pListOCLPackage(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListOCLPackage_;
  }
}
ListOCLPackage* pListOCLPackage(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListOCLPackage_;
  }
}

static OCLPackage* YY_RESULT_OCLPackage_ = 0;
OCLPackage* pOCLPackage(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLPackage_;
  }
}
OCLPackage* pOCLPackage(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLPackage_;
  }
}

static PackageName* YY_RESULT_PackageName_ = 0;
PackageName* pPackageName(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PackageName_;
  }
}
PackageName* pPackageName(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PackageName_;
  }
}

static OCLExpressions* YY_RESULT_OCLExpressions_ = 0;
OCLExpressions* pOCLExpressions(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLExpressions_;
  }
}
OCLExpressions* pOCLExpressions(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLExpressions_;
  }
}

static ListConstrnt* YY_RESULT_ListConstrnt_ = 0;
ListConstrnt* pListConstrnt(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListConstrnt_;
  }
}
ListConstrnt* pListConstrnt(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListConstrnt_;
  }
}

static Constrnt* YY_RESULT_Constrnt_ = 0;
Constrnt* pConstrnt(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Constrnt_;
  }
}
Constrnt* pConstrnt(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Constrnt_;
  }
}

static ListConstrBody* YY_RESULT_ListConstrBody_ = 0;
ListConstrBody* pListConstrBody(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListConstrBody_;
  }
}
ListConstrBody* pListConstrBody(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListConstrBody_;
  }
}

static ConstrBody* YY_RESULT_ConstrBody_ = 0;
ConstrBody* pConstrBody(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ConstrBody_;
  }
}
ConstrBody* pConstrBody(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ConstrBody_;
  }
}

static ContextDeclaration* YY_RESULT_ContextDeclaration_ = 0;
ContextDeclaration* pContextDeclaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ContextDeclaration_;
  }
}
ContextDeclaration* pContextDeclaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ContextDeclaration_;
  }
}

static ClassifierContext* YY_RESULT_ClassifierContext_ = 0;
ClassifierContext* pClassifierContext(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ClassifierContext_;
  }
}
ClassifierContext* pClassifierContext(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ClassifierContext_;
  }
}

static OperationContext* YY_RESULT_OperationContext_ = 0;
OperationContext* pOperationContext(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OperationContext_;
  }
}
OperationContext* pOperationContext(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OperationContext_;
  }
}

static Stereotype* YY_RESULT_Stereotype_ = 0;
Stereotype* pStereotype(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stereotype_;
  }
}
Stereotype* pStereotype(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stereotype_;
  }
}

static OperationName* YY_RESULT_OperationName_ = 0;
OperationName* pOperationName(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OperationName_;
  }
}
OperationName* pOperationName(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OperationName_;
  }
}

static ListFormalParameter* YY_RESULT_ListFormalParameter_ = 0;
ListFormalParameter* pListFormalParameter(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFormalParameter_;
  }
}
ListFormalParameter* pListFormalParameter(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFormalParameter_;
  }
}

static FormalParameter* YY_RESULT_FormalParameter_ = 0;
FormalParameter* pFormalParameter(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FormalParameter_;
  }
}
FormalParameter* pFormalParameter(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FormalParameter_;
  }
}

static TypeSpecifier* YY_RESULT_TypeSpecifier_ = 0;
TypeSpecifier* pTypeSpecifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TypeSpecifier_;
  }
}
TypeSpecifier* pTypeSpecifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TypeSpecifier_;
  }
}

static CollectionType* YY_RESULT_CollectionType_ = 0;
CollectionType* pCollectionType(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CollectionType_;
  }
}
CollectionType* pCollectionType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CollectionType_;
  }
}

static ReturnType* YY_RESULT_ReturnType_ = 0;
ReturnType* pReturnType(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ReturnType_;
  }
}
ReturnType* pReturnType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ReturnType_;
  }
}

static OCLExpression* YY_RESULT_OCLExpression_ = 0;
OCLExpression* pOCLExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLExpression_;
  }
}
OCLExpression* pOCLExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLExpression_;
  }
}

static LetExpression* YY_RESULT_LetExpression_ = 0;
LetExpression* pLetExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LetExpression_;
  }
}
LetExpression* pLetExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LetExpression_;
  }
}

static ListLetExpression* YY_RESULT_ListLetExpression_ = 0;
ListLetExpression* pListLetExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListLetExpression_;
  }
}
ListLetExpression* pListLetExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListLetExpression_;
  }
}

static IfExpression* YY_RESULT_IfExpression_ = 0;
IfExpression* pIfExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_IfExpression_;
  }
}
IfExpression* pIfExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_IfExpression_;
  }
}

static Expression* YY_RESULT_Expression_ = 0;
Expression* pExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_;
  }
}
Expression* pExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_;
  }
}

static MessageArg* YY_RESULT_MessageArg_ = 0;
MessageArg* pMessageArg(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_MessageArg_;
  }
}
MessageArg* pMessageArg(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_MessageArg_;
  }
}

static ListMessageArg* YY_RESULT_ListMessageArg_ = 0;
ListMessageArg* pListMessageArg(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListMessageArg_;
  }
}
ListMessageArg* pListMessageArg(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListMessageArg_;
  }
}

static PropertyCall* YY_RESULT_PropertyCall_ = 0;
PropertyCall* pPropertyCall(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PropertyCall_;
  }
}
PropertyCall* pPropertyCall(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PropertyCall_;
  }
}

static PathName* YY_RESULT_PathName_ = 0;
PathName* pPathName(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PathName_;
  }
}
PathName* pPathName(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PathName_;
  }
}

static PName* YY_RESULT_PName_ = 0;
PName* pPName(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PName_;
  }
}
PName* pPName(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PName_;
  }
}

static ListPName* YY_RESULT_ListPName_ = 0;
ListPName* pListPName(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListPName_;
  }
}
ListPName* pListPName(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListPName_;
  }
}

static PossQualifiers* YY_RESULT_PossQualifiers_ = 0;
PossQualifiers* pPossQualifiers(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PossQualifiers_;
  }
}
PossQualifiers* pPossQualifiers(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PossQualifiers_;
  }
}

static Qualifiers* YY_RESULT_Qualifiers_ = 0;
Qualifiers* pQualifiers(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Qualifiers_;
  }
}
Qualifiers* pQualifiers(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Qualifiers_;
  }
}

static PossTimeExpression* YY_RESULT_PossTimeExpression_ = 0;
PossTimeExpression* pPossTimeExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PossTimeExpression_;
  }
}
PossTimeExpression* pPossTimeExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PossTimeExpression_;
  }
}

static PossPropCallParam* YY_RESULT_PossPropCallParam_ = 0;
PossPropCallParam* pPossPropCallParam(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PossPropCallParam_;
  }
}
PossPropCallParam* pPossPropCallParam(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PossPropCallParam_;
  }
}

static Declarator* YY_RESULT_Declarator_ = 0;
Declarator* pDeclarator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Declarator_;
  }
}
Declarator* pDeclarator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Declarator_;
  }
}

static DeclaratorVarList* YY_RESULT_DeclaratorVarList_ = 0;
DeclaratorVarList* pDeclaratorVarList(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_DeclaratorVarList_;
  }
}
DeclaratorVarList* pDeclaratorVarList(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_DeclaratorVarList_;
  }
}

static ListIdent* YY_RESULT_ListIdent_ = 0;
ListIdent* pListIdent(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListIdent_;
  }
}
ListIdent* pListIdent(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListIdent_;
  }
}

static PropertyCallParameters* YY_RESULT_PropertyCallParameters_ = 0;
PropertyCallParameters* pPropertyCallParameters(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PropertyCallParameters_;
  }
}
PropertyCallParameters* pPropertyCallParameters(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PropertyCallParameters_;
  }
}

static ListExpression* YY_RESULT_ListExpression_ = 0;
ListExpression* pListExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpression_;
  }
}
ListExpression* pListExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpression_;
  }
}

static PCPHelper* YY_RESULT_PCPHelper_ = 0;
PCPHelper* pPCPHelper(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PCPHelper_;
  }
}
PCPHelper* pPCPHelper(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PCPHelper_;
  }
}

static ListPCPHelper* YY_RESULT_ListPCPHelper_ = 0;
ListPCPHelper* pListPCPHelper(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListPCPHelper_;
  }
}
ListPCPHelper* pListPCPHelper(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListPCPHelper_;
  }
}

static OCLLiteral* YY_RESULT_OCLLiteral_ = 0;
OCLLiteral* pOCLLiteral(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLLiteral_;
  }
}
OCLLiteral* pOCLLiteral(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLLiteral_;
  }
}

static SimpleTypeSpecifier* YY_RESULT_SimpleTypeSpecifier_ = 0;
SimpleTypeSpecifier* pSimpleTypeSpecifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_SimpleTypeSpecifier_;
  }
}
SimpleTypeSpecifier* pSimpleTypeSpecifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_SimpleTypeSpecifier_;
  }
}

static LiteralCollection* YY_RESULT_LiteralCollection_ = 0;
LiteralCollection* pLiteralCollection(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LiteralCollection_;
  }
}
LiteralCollection* pLiteralCollection(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LiteralCollection_;
  }
}

static ListCollectionItem* YY_RESULT_ListCollectionItem_ = 0;
ListCollectionItem* pListCollectionItem(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListCollectionItem_;
  }
}
ListCollectionItem* pListCollectionItem(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListCollectionItem_;
  }
}

static CollectionItem* YY_RESULT_CollectionItem_ = 0;
CollectionItem* pCollectionItem(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CollectionItem_;
  }
}
CollectionItem* pCollectionItem(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CollectionItem_;
  }
}

static OCLNumber* YY_RESULT_OCLNumber_ = 0;
OCLNumber* pOCLNumber(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLNumber_;
  }
}
OCLNumber* pOCLNumber(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OCLNumber_;
  }
}

static LogicalOperator* YY_RESULT_LogicalOperator_ = 0;
LogicalOperator* pLogicalOperator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LogicalOperator_;
  }
}
LogicalOperator* pLogicalOperator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LogicalOperator_;
  }
}

static CollectionKind* YY_RESULT_CollectionKind_ = 0;
CollectionKind* pCollectionKind(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CollectionKind_;
  }
}
CollectionKind* pCollectionKind(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CollectionKind_;
  }
}

static EqualityOperator* YY_RESULT_EqualityOperator_ = 0;
EqualityOperator* pEqualityOperator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_EqualityOperator_;
  }
}
EqualityOperator* pEqualityOperator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_EqualityOperator_;
  }
}

static RelationalOperator* YY_RESULT_RelationalOperator_ = 0;
RelationalOperator* pRelationalOperator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RelationalOperator_;
  }
}
RelationalOperator* pRelationalOperator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RelationalOperator_;
  }
}

static AddOperator* YY_RESULT_AddOperator_ = 0;
AddOperator* pAddOperator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_AddOperator_;
  }
}
AddOperator* pAddOperator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_AddOperator_;
  }
}

static MultiplyOperator* YY_RESULT_MultiplyOperator_ = 0;
MultiplyOperator* pMultiplyOperator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_MultiplyOperator_;
  }
}
MultiplyOperator* pMultiplyOperator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_MultiplyOperator_;
  }
}

static UnaryOperator* YY_RESULT_UnaryOperator_ = 0;
UnaryOperator* pUnaryOperator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_UnaryOperator_;
  }
}
UnaryOperator* pUnaryOperator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_UnaryOperator_;
  }
}

static PostfixOperator* YY_RESULT_PostfixOperator_ = 0;
PostfixOperator* pPostfixOperator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PostfixOperator_;
  }
}
PostfixOperator* pPostfixOperator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PostfixOperator_;
  }
}



%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  OCLfile* oclfile_;
  ListOCLPackage* listoclpackage_;
  OCLPackage* oclpackage_;
  PackageName* packagename_;
  OCLExpressions* oclexpressions_;
  ListConstrnt* listconstrnt_;
  Constrnt* constrnt_;
  ListConstrBody* listconstrbody_;
  ConstrBody* constrbody_;
  ContextDeclaration* contextdeclaration_;
  ClassifierContext* classifiercontext_;
  OperationContext* operationcontext_;
  Stereotype* stereotype_;
  OperationName* operationname_;
  ListFormalParameter* listformalparameter_;
  FormalParameter* formalparameter_;
  TypeSpecifier* typespecifier_;
  CollectionType* collectiontype_;
  ReturnType* returntype_;
  OCLExpression* oclexpression_;
  LetExpression* letexpression_;
  ListLetExpression* listletexpression_;
  IfExpression* ifexpression_;
  Expression* expression_;
  MessageArg* messagearg_;
  ListMessageArg* listmessagearg_;
  PropertyCall* propertycall_;
  PathName* pathname_;
  PName* pname_;
  ListPName* listpname_;
  PossQualifiers* possqualifiers_;
  Qualifiers* qualifiers_;
  PossTimeExpression* posstimeexpression_;
  PossPropCallParam* posspropcallparam_;
  Declarator* declarator_;
  DeclaratorVarList* declaratorvarlist_;
  ListIdent* listident_;
  PropertyCallParameters* propertycallparameters_;
  ListExpression* listexpression_;
  PCPHelper* pcphelper_;
  ListPCPHelper* listpcphelper_;
  OCLLiteral* oclliteral_;
  SimpleTypeSpecifier* simpletypespecifier_;
  LiteralCollection* literalcollection_;
  ListCollectionItem* listcollectionitem_;
  CollectionItem* collectionitem_;
  OCLNumber* oclnumber_;
  LogicalOperator* logicaloperator_;
  CollectionKind* collectionkind_;
  EqualityOperator* equalityoperator_;
  RelationalOperator* relationaloperator_;
  AddOperator* addoperator_;
  MultiplyOperator* multiplyoperator_;
  UnaryOperator* unaryoperator_;
  PostfixOperator* postfixoperator_;
}

%token _ERROR_
%token _SYMB_0    //   :
%token _SYMB_1    //   ::
%token _SYMB_2    //   (
%token _SYMB_3    //   )
%token _SYMB_4    //   =
%token _SYMB_5    //   +
%token _SYMB_6    //   -
%token _SYMB_7    //   <
%token _SYMB_8    //   <=
%token _SYMB_9    //   >
%token _SYMB_10    //   >=
%token _SYMB_11    //   /
%token _SYMB_12    //   *
%token _SYMB_13    //   <>
%token _SYMB_14    //   ,
%token _SYMB_15    //   ^
%token _SYMB_16    //   ?
%token _SYMB_17    //   [
%token _SYMB_18    //   ]
%token _SYMB_19    //   @
%token _SYMB_20    //   |
%token _SYMB_21    //   ;
%token _SYMB_22    //   {
%token _SYMB_23    //   }
%token _SYMB_24    //   ..
%token _SYMB_25    //   .
%token _SYMB_26    //   ->
%token _SYMB_27    //   Bag
%token _SYMB_28    //   Collection
%token _SYMB_29    //   Sequence
%token _SYMB_30    //   Set
%token _SYMB_31    //   and
%token _SYMB_32    //   context
%token _SYMB_33    //   def
%token _SYMB_34    //   else
%token _SYMB_35    //   endif
%token _SYMB_36    //   endpackage
%token _SYMB_37    //   false
%token _SYMB_38    //   if
%token _SYMB_39    //   implies
%token _SYMB_40    //   in
%token _SYMB_41    //   inv
%token _SYMB_42    //   let
%token _SYMB_43    //   not
%token _SYMB_44    //   null
%token _SYMB_45    //   or
%token _SYMB_46    //   package
%token _SYMB_47    //   post
%token _SYMB_48    //   pre
%token _SYMB_49    //   then
%token _SYMB_50    //   true
%token _SYMB_51    //   xor

%type <oclfile_> OCLfile
%type <listoclpackage_> ListOCLPackage
%type <oclpackage_> OCLPackage
%type <packagename_> PackageName
%type <oclexpressions_> OCLExpressions
%type <listconstrnt_> ListConstrnt
%type <constrnt_> Constrnt
%type <listconstrbody_> ListConstrBody
%type <constrbody_> ConstrBody
%type <contextdeclaration_> ContextDeclaration
%type <classifiercontext_> ClassifierContext
%type <operationcontext_> OperationContext
%type <stereotype_> Stereotype
%type <operationname_> OperationName
%type <listformalparameter_> ListFormalParameter
%type <formalparameter_> FormalParameter
%type <typespecifier_> TypeSpecifier
%type <collectiontype_> CollectionType
%type <returntype_> ReturnType
%type <oclexpression_> OCLExpression
%type <letexpression_> LetExpression
%type <listletexpression_> ListLetExpression
%type <ifexpression_> IfExpression
%type <expression_> Expression
%type <expression_> Expression1
%type <expression_> Expression2
%type <expression_> Expression3
%type <expression_> Expression4
%type <expression_> Expression5
%type <expression_> Expression6
%type <expression_> Expression7
%type <expression_> Expression8
%type <messagearg_> MessageArg
%type <listmessagearg_> ListMessageArg
%type <propertycall_> PropertyCall
%type <pathname_> PathName
%type <pname_> PName
%type <listpname_> ListPName
%type <possqualifiers_> PossQualifiers
%type <qualifiers_> Qualifiers
%type <posstimeexpression_> PossTimeExpression
%type <posspropcallparam_> PossPropCallParam
%type <declarator_> Declarator
%type <declaratorvarlist_> DeclaratorVarList
%type <listident_> ListIdent
%type <propertycallparameters_> PropertyCallParameters
%type <listexpression_> ListExpression
%type <pcphelper_> PCPHelper
%type <listpcphelper_> ListPCPHelper
%type <oclliteral_> OCLLiteral
%type <simpletypespecifier_> SimpleTypeSpecifier
%type <literalcollection_> LiteralCollection
%type <listcollectionitem_> ListCollectionItem
%type <collectionitem_> CollectionItem
%type <oclnumber_> OCLNumber
%type <logicaloperator_> LogicalOperator
%type <collectionkind_> CollectionKind
%type <equalityoperator_> EqualityOperator
%type <relationaloperator_> RelationalOperator
%type <addoperator_> AddOperator
%type <multiplyoperator_> MultiplyOperator
%type <unaryoperator_> UnaryOperator
%type <postfixoperator_> PostfixOperator

%start OCLfile
%token<string_> _STRING_
%token<int_> _INTEGER_
%token<double_> _DOUBLE_
%token<string_> _IDENT_

%%
OCLfile : ListOCLPackage {  std::reverse($1->begin(),$1->end()) ;$$ = new OCLf($1); YY_RESULT_OCLfile_= $$; } 
;
ListOCLPackage : OCLPackage {  $$ = new ListOCLPackage() ; $$->push_back($1);  } 
  | OCLPackage ListOCLPackage {  $2->push_back($1) ; $$ = $2 ;  }
;
OCLPackage : _SYMB_46 PackageName OCLExpressions _SYMB_36 {  $$ = new Pack($2, $3);  } 
;
PackageName : PathName {  $$ = new PackName($1);  } 
;
OCLExpressions : ListConstrnt {  $$ = new Constraints($1);  } 
;
ListConstrnt : /* empty */ {  $$ = new ListConstrnt();  } 
  | ListConstrnt Constrnt {  $1->push_back($2) ; $$ = $1 ;  }
;
Constrnt : ContextDeclaration ListConstrBody {  std::reverse($2->begin(),$2->end()) ;$$ = new Constr($1, $2); YY_RESULT_Constrnt_= $$; } 
;
ListConstrBody : ConstrBody {  $$ = new ListConstrBody() ; $$->push_back($1);  } 
  | ConstrBody ListConstrBody {  $2->push_back($1) ; $$ = $2 ;  }
;
ConstrBody : _SYMB_33 _IDENT_ _SYMB_0 ListLetExpression {  std::reverse($4->begin(),$4->end()) ;$$ = new CBDefNamed($2, $4);  } 
  | _SYMB_33 _SYMB_0 ListLetExpression {  std::reverse($3->begin(),$3->end()) ;$$ = new CBDef($3);  }
  | Stereotype _IDENT_ _SYMB_0 OCLExpression {  $$ = new CBNamed($1, $2, $4);  }
  | Stereotype _SYMB_0 OCLExpression {  $$ = new CB($1, $3);  }
;
ContextDeclaration : _SYMB_32 OperationContext {  $$ = new CDOper($2);  } 
  | _SYMB_32 ClassifierContext {  $$ = new CDClassif($2);  }
;
ClassifierContext : _IDENT_ _SYMB_0 _IDENT_ {  $$ = new CCType($1, $3);  } 
  | _IDENT_ {  $$ = new CC($1);  }
;
OperationContext : _IDENT_ _SYMB_1 OperationName _SYMB_2 ListFormalParameter _SYMB_3 {  std::reverse($5->begin(),$5->end()) ;$$ = new OpC($1, $3, $5);  } 
  | _IDENT_ _SYMB_1 OperationName _SYMB_2 ListFormalParameter _SYMB_3 _SYMB_0 ReturnType {  std::reverse($5->begin(),$5->end()) ;$$ = new OpCRT($1, $3, $5, $8);  }
;
Stereotype : _SYMB_48 {  $$ = new Pre();  } 
  | _SYMB_47 {  $$ = new Post();  }
  | _SYMB_41 {  $$ = new Inv();  }
;
OperationName : _IDENT_ {  $$ = new OpName($1);  } 
  | _SYMB_4 {  $$ = new Eq();  }
  | _SYMB_5 {  $$ = new Add();  }
  | _SYMB_6 {  $$ = new Sub();  }
  | _SYMB_7 {  $$ = new LST();  }
  | _SYMB_8 {  $$ = new LSTE();  }
  | _SYMB_9 {  $$ = new GRT();  }
  | _SYMB_10 {  $$ = new GRTE();  }
  | _SYMB_11 {  $$ = new Div();  }
  | _SYMB_12 {  $$ = new Mult();  }
  | _SYMB_13 {  $$ = new NEq();  }
  | _SYMB_39 {  $$ = new Impl();  }
  | _SYMB_43 {  $$ = new Not();  }
  | _SYMB_45 {  $$ = new Or();  }
  | _SYMB_51 {  $$ = new Xor();  }
  | _SYMB_31 {  $$ = new And();  }
;
ListFormalParameter : /* empty */ {  $$ = new ListFormalParameter();  } 
  | FormalParameter {  $$ = new ListFormalParameter() ; $$->push_back($1);  }
  | FormalParameter _SYMB_14 ListFormalParameter {  $3->push_back($1) ; $$ = $3 ;  }
;
FormalParameter : _IDENT_ _SYMB_0 TypeSpecifier {  $$ = new FP($1, $3);  } 
;
TypeSpecifier : SimpleTypeSpecifier {  $$ = new TSsimple($1);  } 
  | CollectionType {  $$ = new TScoll($1);  }
;
CollectionType : CollectionKind _SYMB_2 SimpleTypeSpecifier _SYMB_3 {  $$ = new CT($1, $3);  } 
;
ReturnType : TypeSpecifier {  $$ = new RT($1);  } 
;
OCLExpression : Expression {  $$ = new OCLExp($1);  } 
  | ListLetExpression _SYMB_40 Expression {  std::reverse($1->begin(),$1->end()) ;$$ = new OCLExpLet($1, $3);  }
;
LetExpression : _SYMB_42 _IDENT_ _SYMB_4 Expression {  $$ = new LENoParam($2, $4);  } 
  | _SYMB_42 _IDENT_ _SYMB_0 TypeSpecifier _SYMB_4 Expression {  $$ = new LENoParamType($2, $4, $6);  }
  | _SYMB_42 _IDENT_ _SYMB_2 ListFormalParameter _SYMB_3 _SYMB_4 Expression {  std::reverse($4->begin(),$4->end()) ;$$ = new LE($2, $4, $7);  }
  | _SYMB_42 _IDENT_ _SYMB_2 ListFormalParameter _SYMB_3 _SYMB_0 TypeSpecifier _SYMB_4 Expression {  std::reverse($4->begin(),$4->end()) ;$$ = new LEType($2, $4, $7, $9);  }
;
ListLetExpression : LetExpression {  $$ = new ListLetExpression() ; $$->push_back($1);  } 
  | LetExpression ListLetExpression {  $2->push_back($1) ; $$ = $2 ;  }
;
IfExpression : _SYMB_38 Expression _SYMB_49 Expression _SYMB_34 Expression _SYMB_35 {  $$ = new IfExp($2, $4, $6);  } 
;
Expression : Expression _SYMB_39 Expression1 {  $$ = new EOpImpl($1, $3); YY_RESULT_Expression_= $$; } 
  | Expression1 {  $$ = $1; YY_RESULT_Expression_= $$; }
;
Expression1 : Expression1 LogicalOperator Expression2 {  $$ = new EOpLog($1, $2, $3);  } 
  | Expression2 {  $$ = $1;  }
;
Expression2 : Expression2 EqualityOperator Expression3 {  $$ = new EOpEq($1, $2, $3);  } 
  | Expression3 {  $$ = $1;  }
;
Expression3 : Expression3 RelationalOperator Expression4 {  $$ = new EOpRel($1, $2, $3);  } 
  | Expression4 {  $$ = $1;  }
;
Expression4 : Expression4 AddOperator Expression5 {  $$ = new EOpAdd($1, $2, $3);  } 
  | Expression5 {  $$ = $1;  }
;
Expression5 : Expression5 MultiplyOperator Expression6 {  $$ = new EOpMul($1, $2, $3);  } 
  | Expression6 {  $$ = $1;  }
;
Expression6 : UnaryOperator Expression7 {  $$ = new EOpUn($1, $2);  } 
  | Expression7 {  $$ = $1;  }
;
Expression7 : Expression7 PostfixOperator PropertyCall {  $$ = new EExplPropCall($1, $2, $3);  } 
  | Expression7 _SYMB_15 PathName _SYMB_2 ListMessageArg _SYMB_3 {  std::reverse($5->begin(),$5->end()) ;$$ = new EMessage($1, $3, $5);  }
  | Expression8 {  $$ = $1;  }
;
Expression8 : PropertyCall {  $$ = new EImplPropCall($1);  } 
  | LiteralCollection {  $$ = new ELitColl($1);  }
  | OCLLiteral {  $$ = new ELit($1);  }
  | IfExpression {  $$ = new EIfExp($1);  }
  | _SYMB_44 {  $$ = new ENull();  }
  | _SYMB_2 Expression _SYMB_3 {  $$ = $2;  }
;
MessageArg : Expression {  $$ = new MAExpr($1);  } 
  | _SYMB_16 {  $$ = new MAUnspec();  }
  | _SYMB_16 _SYMB_0 TypeSpecifier {  $$ = new MAUnspecTyped($3);  }
;
ListMessageArg : /* empty */ {  $$ = new ListMessageArg();  } 
  | MessageArg {  $$ = new ListMessageArg() ; $$->push_back($1);  }
  | MessageArg _SYMB_14 ListMessageArg {  $3->push_back($1) ; $$ = $3 ;  }
;
PropertyCall : PathName PossTimeExpression PossQualifiers PossPropCallParam {  $$ = new PCall($1, $2, $3, $4);  } 
;
PathName : ListPName {  std::reverse($1->begin(),$1->end()) ;$$ = new PathN($1);  } 
;
PName : _IDENT_ {  $$ = new PN($1);  } 
;
ListPName : PName {  $$ = new ListPName() ; $$->push_back($1);  } 
  | PName _SYMB_1 ListPName {  $3->push_back($1) ; $$ = $3 ;  }
;
PossQualifiers : /* empty */ {  $$ = new NoQual();  } 
  | Qualifiers {  $$ = new Qual($1);  }
;
Qualifiers : _SYMB_17 ListExpression _SYMB_18 {  std::reverse($2->begin(),$2->end()) ;$$ = new Quals($2);  } 
;
PossTimeExpression : /* empty */ {  $$ = new NoTE();  } 
  | _SYMB_19 _SYMB_48 {  $$ = new AtPre();  }
;
PossPropCallParam : /* empty */ {  $$ = new NoPCP();  } 
  | PropertyCallParameters {  $$ = new PCPs($1);  }
;
Declarator : DeclaratorVarList _SYMB_20 {  $$ = new Decl($1);  } 
  | DeclaratorVarList _SYMB_21 _IDENT_ _SYMB_0 TypeSpecifier _SYMB_4 Expression _SYMB_20 {  $$ = new DeclAcc($1, $3, $5, $7);  }
;
DeclaratorVarList : ListIdent {  std::reverse($1->begin(),$1->end()) ;$$ = new DVL($1);  } 
  | ListIdent _SYMB_0 SimpleTypeSpecifier {  std::reverse($1->begin(),$1->end()) ;$$ = new DVLType($1, $3);  }
;
ListIdent : _IDENT_ {  $$ = new ListIdent() ; $$->push_back($1);  } 
  | _IDENT_ _SYMB_14 ListIdent {  $3->push_back($1) ; $$ = $3 ;  }
;
PropertyCallParameters : _SYMB_2 _SYMB_3 {  $$ = new PCPNoDeclNoParam();  } 
  | _SYMB_2 Expression ListPCPHelper _SYMB_3 {  $$ = new PCPConcrete($2, $3);  }
;
ListExpression : /* empty */ {  $$ = new ListExpression();  } 
  | Expression {  $$ = new ListExpression() ; $$->push_back($1);  }
  | Expression _SYMB_14 ListExpression {  $3->push_back($1) ; $$ = $3 ;  }
;
PCPHelper : _SYMB_14 Expression {  $$ = new PCPComma($2);  } 
  | _SYMB_0 SimpleTypeSpecifier {  $$ = new PCPColon($2);  }
  | _SYMB_21 _IDENT_ _SYMB_0 TypeSpecifier _SYMB_4 Expression {  $$ = new PCPIterate($2, $4, $6);  }
  | _SYMB_20 Expression {  $$ = new PCPBar($2);  }
;
ListPCPHelper : /* empty */ {  $$ = new ListPCPHelper();  } 
  | ListPCPHelper PCPHelper {  $1->push_back($2) ; $$ = $1 ;  }
;
OCLLiteral : _STRING_ {  $$ = new LitStr($1);  } 
  | OCLNumber {  $$ = new LitNum($1);  }
  | _SYMB_50 {  $$ = new LitBoolTrue();  }
  | _SYMB_37 {  $$ = new LitBoolFalse();  }
;
SimpleTypeSpecifier : PathName {  $$ = new STSpec($1);  } 
;
LiteralCollection : CollectionKind _SYMB_22 ListCollectionItem _SYMB_23 {  std::reverse($3->begin(),$3->end()) ;$$ = new LCollection($1, $3);  } 
  | CollectionKind _SYMB_22 _SYMB_23 {  $$ = new LCollectionEmpty($1);  }
;
ListCollectionItem : CollectionItem {  $$ = new ListCollectionItem() ; $$->push_back($1);  } 
  | CollectionItem _SYMB_14 ListCollectionItem {  $3->push_back($1) ; $$ = $3 ;  }
;
CollectionItem : Expression {  $$ = new CI($1);  } 
  | Expression _SYMB_24 Expression {  $$ = new CIRange($1, $3);  }
;
OCLNumber : _INTEGER_ {  $$ = new NumInt($1);  } 
  | _DOUBLE_ {  $$ = new NumDouble($1);  }
;
LogicalOperator : _SYMB_31 {  $$ = new LAnd();  } 
  | _SYMB_45 {  $$ = new LOr();  }
  | _SYMB_51 {  $$ = new LXor();  }
;
CollectionKind : _SYMB_30 {  $$ = new Set();  } 
  | _SYMB_27 {  $$ = new Bag();  }
  | _SYMB_29 {  $$ = new Sequence();  }
  | _SYMB_28 {  $$ = new Collection();  }
;
EqualityOperator : _SYMB_4 {  $$ = new EEq();  } 
  | _SYMB_13 {  $$ = new ENEq();  }
;
RelationalOperator : _SYMB_9 {  $$ = new RGT();  } 
  | _SYMB_10 {  $$ = new RGTE();  }
  | _SYMB_7 {  $$ = new RLT();  }
  | _SYMB_8 {  $$ = new RLTE();  }
;
AddOperator : _SYMB_5 {  $$ = new AAdd();  } 
  | _SYMB_6 {  $$ = new ASub();  }
;
MultiplyOperator : _SYMB_12 {  $$ = new MMult();  } 
  | _SYMB_11 {  $$ = new MDiv();  }
;
UnaryOperator : _SYMB_6 {  $$ = new UMin();  } 
  | _SYMB_43 {  $$ = new UNot();  }
;
PostfixOperator : _SYMB_25 {  $$ = new PDot();  } 
  | _SYMB_26 {  $$ = new PArrow();  }
;

